Concurrent Web Server Using BSD Sockets

High Level DesignThis project uses socket programming that can read and process HTTP requests from a client. The web server then sends back a response to the client with the respective headers and data. This project was developed on a Linux VM using Ubuntu and the client in this case is the Firefox browser. Requests are made through the browser URL by typing:http://localhost:<port number>/test.htmlThe server initially listens for any clients that are trying to connect. When the connection is successfully created, the socket processes the HTTP request coming from the client. This request is also displayed in the console. As each request is read, the HTTP request message is first shown in the console and attempts to get the name of the requested file and display its contents to the browser.In this project, there is a function called void read_request(char* url, int request) that first checks to see if the name of the file is correct and exists. If it exists, it opens and reads in the file data. If it does not exist, then the client receives a message saying that the file was not found. Another function called void parse_request(int request) is responsible for reading and processing the data requested.The web server can handle html, jpg, and gif files. As of right now, this webserver can only serve one client at a time but can accept multiple HTTP requests.

How to Compile and Run the Webserver1. Navigate to the folder containing webserver.c and the Makefile.2. Type “make” to compile the file, you can also type “make clean” to clean upany preexisting object and executable files3. Type “./webserver <port number>” to start up the webserver4. Open the browser, and enter http://localhost:<port number>/test.html. In thiscase, test.html is the file name, but you can also enter other jpg or gif files such as dog.gif or ucla.jpg. 